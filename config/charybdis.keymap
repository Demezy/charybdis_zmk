#include "keys_de_swiss.h"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include "macros.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    #define DEF 0
#define MOD 1
#define INT 2

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <31 28>;
        };

        left_click {
            bindings = <&mkp LCLK>;
            key-positions = <43 44>;
        };

        right_click {
            bindings = <&mkp RCLK>;
            key-positions = <44 45>;
        };
    };

    macros {
        new_test_macro: new_test_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A>;
            label = "NEW_TEST_MACRO";
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 53 54 51 52 55>;
            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <48 49 50 53 54 51 52 55 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 51 52>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
&kp GRAVE   &kp N1  &kp N2  &kp N3   &kp N4     &kp N5       &kp N6     &kp N7         &kp N8     &kp N9   &kp N0     &kp MINUS
&kp TAB     &kp Q   &kp W   &kp E    &kp R      &kp T        &kp Y      &kp U          &kp I      &kp O    &kp P      &kp BACKSLASH
&kp LSHIFT  &kp A   &kp S   &kp D    &kp F      &kp G        &kp H      &kp J          &kp K      &kp L    &kp SEMI   &kp APOS
&kp LCTRL   &kp Z   &kp X   &kp C    &kp V      &kp B        &kp N      &kp M          &kp COMMA  &kp DOT  &kp SLASH  &kp RSHIFT
                            &kp TAB  &kp SPACE  &kp LGUI     &kp ENTER  &kp BACKSPACE
                                     &mkp RCLK  &mkp LCLK    &mkp LCLK
            >;
        };
    };
};
